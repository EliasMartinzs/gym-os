generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Gender {
  MALE   @map("masculino")
  FEMALE @map("feminino")
}

enum WorkoutType {
  STRENGTH_TRAINING @map("treino_de_forca")
  HIIT              @map("hiit")
  CARDIO            @map("cardio")
  CROSSFIT          @map("crossfit")
  CALISTHENICS      @map("calistenia")
  PILATES           @map("pilates")
  YOGA              @map("yoga")
  FUNCTIONAL        @map("funcional")
}

enum GoalStatus {
  ACTIVE    @map("ativo")
  PAUSED    @map("pausado")
  COMPLETED @map("concluido")
  ABANDONED @map("abandonado")
}

enum FitnessGoal {
  FAT_LOSS              @map("perda_de_gordura")
  MUSCLE_GAIN           @map("ganho_de_massa")
  BODY_RECOMPOSITION    @map("recomposicao_corporal")
  STRENGTH_GAIN         @map("ganho_de_forca")
  ENDURANCE_IMPROVEMENT @map("melhora_de_resistencia")
  INJURY_RECOVERY       @map("recuperacao_de_lesao")
  POSTURE_CORRECTION    @map("correcao_postural")
  FUNCTIONAL_FITNESS    @map("condicionamento_funcional")
  DEFINITION            @map("definicao_muscular")
  COMPETITION_PREP      @map("preparacao_para_competicao")
}

enum PhotoCategory {
  FRONT   @map("frontal")
  SIDE    @map("lateral")
  BACK    @map("posterior")
  FLEXED  @map("contraido")
  RELAXED @map("relaxado")
}

enum TrainingFormat {
  IN_PERSON      @map("presencial")
  ONLINE         @map("online")
  HYBRID         @map("hibrido")
  NUTRITION_PLAN @map("plano_nutricional")
}

enum Status {
  ACTIVE      @map("ativo")
  INACTIVE    @map("inativo")
  PENDING     @map("pendente")
  COMPLETED   @map("concluido")
  IN_PROGRESS @map("em_andamento")
  ON_HOLD     @map("em_espera")
}

enum Role {
  PERSONAL_TRAINER @map("personal_trainer")
  STUDENT          @map("aluno")
}

enum SessionStatus {
  SCHEDULED   @map("agendada")
  CONFIRMED   @map("confirmada")
  IN_PROGRESS @map("em_andamento")
  COMPLETED   @map("concluída")
  CANCELLED   @map("cancelada")
  NO_SHOW     @map("não_compareceu")
}

enum SessionType {
  PERSONAL_TRAINING @map("treino_personalizado")
  NUTRITION         @map("nutrição")
  ASSESSMENT        @map("avaliação")
  FOLLOW_UP         @map("acompanhamento")
}

enum AttachmentType {
  EXERCISE_LIST  @map("lista_exercicios")
  DIET_PLAN      @map("plano_alimentar")
  PROGRESS_PHOTO @map("foto_progresso")
  NOTE           @map("anotação")
}

enum RecurrencePattern {
  DAILY    @map("diário")
  WEEKLY   @map("semanal")
  BIWEEKLY @map("quinzenal")
  MONTHLY  @map("mensal")
  CUSTOM   @map("personalizado")
}

enum DayOfWeek {
  MONDAY    @map("segunda-feira")
  TUESDAY   @map("terça-feira")
  WEDNESDAY @map("quarta-feira")
  THURSDAY  @map("quinta-feira")
  FRIDAY    @map("sexta-feira")
  SATURDAY  @map("sábado")
  SUNDAY    @map("domingo")
}

enum DifficultyLevel {
  BEGINNER     @map("iniciante")
  INTERMEDIATE @map("intermediário")
  ADVANCED     @map("avançado")
}

enum MuscleGroup {
  CHEST // Peitoral
  UPPER_CHEST // Peitoral superior
  LOWER_CHEST // Peitoral inferior
  BACK // Costas (geral)
  LATS // Latíssimo do dorsi
  TRAPS // Trapézio
  RHOMBOIDS // Romboides
  LOWER_BACK // Lombar
  SHOULDERS // Deltóides (geral)
  FRONT_DELTS // Deltóide anterior
  SIDE_DELTS // Deltóide lateral
  REAR_DELTS // Deltóide posterior
  BICEPS // Bíceps braquial
  TRICEPS // Tríceps
  FOREARMS // Antebraços

  // Core (Núcleo)
  ABS // Reto abdominal
  OBLIQUES // Oblíquos
  TRANSVERSE_ABS // Transverso abdominal
  ERECTORS // Eretores da espinha

  // Membros Inferiores
  QUADS // Quadríceps
  HAMSTRINGS // Isquiotibiais
  GLUTES // Glúteos (máx/méd/mín)
  ADDUCTORS // Adutores
  ABDUCTORS // Abdutores
  CALVES // Panturrilhas
  TIBIALIS // Tibial anterior

  // Corpo Inteiro
  FULL_BODY // Exercícios multiarticulares
  CARDIO // Grupos usados em cardio
  POSTERIOR_CHAIN // Cadeia posterior
}

enum LocationType {
  IN_PERSON @map("presencial")
  ONLINE    @map("online")
  HYBRID    @map("hibrido")
  OUTDOOR   @map("ao_ar_livre")
}

enum TrainingPhase {
  PREPARATION @map("preparacao")
  BASE        @map("base")
  BUILD       @map("construcao")
  PEAK        @map("pico")
  RECOVERY    @map("recuperacao")
  TRANSITION  @map("transicao")
}

enum PriorityLevel {
  LOW      @map("baixa")
  MEDIUM   @map("media")
  HIGH     @map("alta")
  CRITICAL @map("critica")
}

enum PaymentStatus {
  PENDING        @map("pendente")
  PARTIALLY_PAID @map("parcialmente_pago")
  PAID           @map("pago")
  REFUNDED       @map("reembolsado")
  IN_DISPUTE     @map("em_disputa")
  CANCELLED      @map("cancelado")
}

enum RecurrenceEnd {
  NEVER             @map("nunca")
  AFTER_OCCURRENCES @map("apos_ocorrencias")
  ON_DATE           @map("na_data")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  phone     String?
  avatarUrl String?
  role      Role     @default(PERSONAL_TRAINER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  personalTrainer PersonalTrainer?
  student         Student?

  @@map("users")
}

model PersonalTrainer {
  id                      String                    @id @default(uuid())
  userId                  String                    @unique
  user                    User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio                     String?
  specialties             String[]
  experienceYears         Int?
  education               Education[]
  certifications          Certification[]
  trainingPhilosophy      String?
  availableFormats        TrainingFormat[]
  instagram               String?
  website                 String?
  student                 Student[]
  exercise                Exercise[]
  Session                 Session[]
  WorkoutTemplate         WorkoutTemplate[]
  AssignedWorkoutTemplate AssignedWorkoutTemplate[]

  @@map("personal_trainers")
}

model Education {
  id                String          @id @default(uuid())
  personalTrainer   PersonalTrainer @relation(fields: [personalTrainerId], references: [id])
  personalTrainerId String
  institution       String // Ex: "Universidade de São Paulo"
  degree            String // Ex: "Bacharelado em Educação Física"
  startYear         Int
  endYear           Int?
  isCurrent         Boolean?

  @@map("educations")
}

model Certification {
  id                String          @id @default(uuid())
  personalTrainer   PersonalTrainer @relation(fields: [personalTrainerId], references: [id])
  personalTrainerId String
  name              String
  organization      String
  yearObtained      Int
  credentialId      String?

  @@map("certifications")
}

model Student {
  id                      String                    @id @default(uuid())
  userId                  String                    @unique
  user                    User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  personalTrainer         PersonalTrainer           @relation(fields: [personalTrainerId], references: [id])
  personalTrainerId       String
  birthDate               DateTime?                 @db.Date
  gender                  Gender?
  injuries                Injury[]
  trainingFormat          TrainingFormat
  status                  Status
  workoutDays             Int?
  progressPhoto           ProgressPhoto[]
  exercise                Exercise[]
  diet                    Diet[]
  goal                    Goal[]
  session                 Session[]
  workoutTemplate         WorkoutTemplate[]
  AssignedWorkoutTemplate AssignedWorkoutTemplate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("students")
}

model Goal {
  id        String  @id @default(uuid())
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String

  type      FitnessGoal
  isPrimary Boolean     @default(false)

  targetValue       Float?
  currentValue      Float?
  measurementMethod String? // "bioimpedância", "fita métrica", etc

  startDate DateTime   @default(now())
  deadline  DateTime?
  progress  Float?
  status    GoalStatus @default(ACTIVE)

  notes Note[]

  // Sistema
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId, type])
  @@map("goals")
}

model Note {
  id        String   @id @default(uuid())
  goal      Goal     @relation(fields: [goalId], references: [id])
  goalId    String
  content   String
  createdAt DateTime @default(now())

  @@map("goal_notes")
}

model Injury {
  id           String    @id @default(uuid())
  student      Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId    String
  description  String // Ex: "Lesão no joelho direito"
  dateOccurred DateTime?
  recovered    Boolean   @default(false)
  notes        String? // Ex: "Evitar agachamento profundo"

  @@map("injuries")
}

model ProgressPhoto {
  id        String        @id @default(uuid())
  student   Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String
  photoUrl  String
  category  PhotoCategory
  takenAt   DateTime      @default(now())
  notes     String?

  @@map("progress_photos")
}

model WorkoutTemplate {
  id          String          @id @default(uuid())
  name        String
  description String?
  isReusable  Boolean
  isPublic    Boolean         @default(false) // Se outros trainers podem ver
  creator     PersonalTrainer @relation(fields: [trainerId], references: [id])
  trainerId   String
  days        WorkoutDay[]
  createdAt   DateTime        @default(now())

  // Configurações padrão (para templates genéricos)
  defaultGoal  FitnessGoal[]
  defaultLevel DifficultyLevel?
  defaultTags  String[]

  // Relacionamento com instâncias aplicadas
  assignedInstances AssignedWorkoutTemplate[] @relation("TemplateAssignments")
  student           Student?                  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId         String?
  session           Session[]

  @@index([trainerId, isPublic])
  @@map("workout_templates")
}

model AssignedWorkoutTemplate {
  id         String          @id @default(uuid())
  template   WorkoutTemplate @relation(fields: [templateId], references: [id], name: "TemplateAssignments", onDelete: Cascade)
  templateId String
  student    Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId  String
  trainer    PersonalTrainer @relation(fields: [trainerId], references: [id])
  trainerId  String

  // Personalizações (sobrescrevem as padrão)
  customGoal  FitnessGoal[]
  customLevel DifficultyLevel?
  customTags  String[]
  notes       String?

  // Controle temporal
  startDate DateTime
  endDate   DateTime?
  isActive  Boolean   @default(true)

  sessions Session[]

  @@index([studentId, isActive])
  @@map("assigned_workout_templates")
}

model WorkoutDay {
  id                String              @id @default(uuid())
  template          WorkoutTemplate     @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId        String
  name              String // "Treino A", "Push Day"
  dayOfWeek         DayOfWeek? // Nullable para templates rápidos
  order             Int // Ordenação dos dias
  focusMuscle       MuscleGroup[]
  exercises         Exercise[]
  exerciseInWorkout ExerciseInWorkout[]

  @@map("workout_days")
}

model ExerciseInWorkout {
  id         String     @id @default(uuid())
  workoutDay WorkoutDay @relation(fields: [dayId], references: [id], onDelete: Cascade)
  dayId      String
  exercise   Exercise   @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId String
  order      Int
  sets       Int
  reps       String
  rest       Int?

  @@map("exercise_in_workout")
}

model Exercise {
  id                String              @id @default(uuid())
  name              String
  type              String
  muscle            String
  equipment         String
  difficulty        String
  instructions      String
  personalTrainerId String
  personalTrainer   PersonalTrainer     @relation(fields: [personalTrainerId], references: [id])
  student           Student?            @relation(fields: [studentId], references: [id])
  studentId         String?
  workoutDay        WorkoutDay?         @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
  workoutDayId      String?
  exerciseInWorkout ExerciseInWorkout[]

  @@unique([name, personalTrainerId], name: "name_personalTrainerId")
  @@map("exercises")
}

model Session {
  id String @id @default(uuid())

  // Relacionamentos essenciais
  student   Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String
  trainer   PersonalTrainer @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  trainerId String

  // Período e localização
  startAt      DateTime     @db.Timestamp(6)
  endAt        DateTime     @db.Timestamp(6)
  locationType LocationType @default(IN_PERSON)
  street       String?
  number       String?
  neighborhood String?
  city         String?
  postalCode   String?

  // Status 
  status     SessionStatus @default(SCHEDULED)
  phase      TrainingPhase // Periodização do treino
  priority   PriorityLevel @default(MEDIUM)
  ressurence Recurrence?

  // Métricas de desempenho
  rpe               Int? // Escala de Borg modificada
  sessionRating     Int? // Qualidade geral da sessão
  perceivedRecovery Int? // PRS - Perceived Recovery Status

  // Documentação
  observations    String? @db.Text // Observações do profissional
  studentFeedback String? @db.Text // Feedback do aluno

  // Timestamps
  createdAt                 DateTime                 @default(now()) @db.Timestamp(6)
  updatedAt                 DateTime                 @updatedAt @db.Timestamp(6)
  canceledAt                DateTime?                @db.Timestamp(6)
  completedAt               DateTime?                @db.Timestamp(6)
  workoutTemplate           WorkoutTemplate?         @relation(fields: [workoutTemplateId], references: [id], onDelete: Cascade)
  workoutTemplateId         String?
  assignedWorkoutTemplate   AssignedWorkoutTemplate? @relation(fields: [assignedWorkoutTemplateId], references: [id], onDelete: Cascade)
  assignedWorkoutTemplateId String?

  // Índices
  @@index([studentId, startAt])
  @@index([trainerId, startAt])
  @@index([status, startAt])
  @@map("sessions")
}

model Recurrence {
  id        String  @id @default(uuid())
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String  @unique

  // Padrão base de recorrência
  pattern  RecurrencePattern
  interval Int               @default(1) // Intervalo entre ocorrências

  // Configuração por tipo de padrão
  daily   Json? // { weekdays: boolean } para dias úteis/diário
  weekly  Json? // { daysOfWeek: DayOfWeek[] }
  monthly Json? // { dayOfMonth: Int, mode: 'day'|'week' }

  // Limites da recorrência
  startDate    DateTime      @default(now())
  endCondition RecurrenceEnd @default(NEVER)
  endAfter     Int? // Número de ocorrências
  endDate      DateTime? // Data final absoluta

  // Exceções e ajustes
  excludedDates DateTime[] // Datas específicas a ignorar
  adjustedDates Json? // { original: DateTime, adjusted: DateTime }[]

  // Timezone e fuso horário
  timezone String @default("America/Sao_Paulo")

  // Metadados
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("recurrences")
}

model Diet {
  id        String    @id @default(uuid())
  student   Student   @relation(fields: [studentId], references: [id])
  studentId String
  name      String // "Dieta de Bulking", "Low Carb", etc
  active    Boolean   @default(false)
  startDate DateTime?
  endDate   DateTime?
  meals     Meal[]
  createdAt DateTime  @default(now())

  @@map("diets")
}

model Meal {
  id     String  @id @default(uuid())
  diet   Diet    @relation(fields: [dietId], references: [id])
  dietId String
  name   String // "Café da Manhã", "Pré-Treino"
  time   String? // "08:00" ou "Antes do Treino"
  foods  Food[]
  notes  String? // "Comer 30min antes do treino"

  @@map("meals")
}

model Food {
  id       String @id @default(uuid())
  meal     Meal   @relation(fields: [mealId], references: [id])
  mealId   String
  name     String // "Arroz integral", "Whey Protein"
  quantity String // "1 xícara", "30g"
  calories Int?
  protein  Int? // Em gramas
  carbs    Int? // Em gramas
  fats     Int? // Em gramas

  @@map("foods")
}
